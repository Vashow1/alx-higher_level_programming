This here file contains the docttests to be conducted to ensure
proper working of the text_indentation module

Note that the function works as follows:
It prints a text parsed into it with 2 new lines after each of these characters: ., ? and :

Basic Setting up

:

>>> text_indentation = __import__('5-text_indentation').text_indentation

Checking normal entries if it works

:

>>> text_indentation("Hello. World?")
Hello.
<BLANKLINE>
World?
<BLANKLINE>

>>> text_indentation(".?:")
.
<BLANKLINE>
?
<BLANKLINE>
:
<BLANKLINE>

Checking if the text is stripped before printing

:

>>> text_indentation("	Hello World	")
Hello World

Also no spaces at the end or start of each printed line

:

>>> text_indentation("	Hello.	World.	")
Hello.
<BLANKLINE>
World.
<BLANKLINE>

New line printed as normal if included in string

>>> text_indentation("Hello\n World")
Hello
World

text_indentation("\n\n\n New lines are not stripped only spaces.")
<BLANKLINE>
<BLANKLINE>
<BLANKLINE>
New lines are not stripped only spaces.
<BLANKLINE>

Checking if errors are raised if text is not a string

:

>>> text_indentation(1)
Traceback (most recent call last):
TypeError: text must be a string

>>> text_indentation(["Even this fails"])
Traceback (most recent call last):
TypeError: text must be a string

>>> text_indentation(None)
Traceback (most recent call last):
TypeError: text must be a string
