# 0-add_integer.txt


Defines the function ``add_integer(a, b=98)``.

Usage

``add_integer(...)``` returns the addition of its two arguments

:

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(5, 5)
    10

Testing that adding a negative number results in the right output
:

    >>> add_integer(-3, -3)
    -6

Floating-point values

:

    >>> add_integer(5.0, 5.0)
    10

Confirming that floats are cast into int

:

    >>> add_integer(5.9, 5.2)
    10

:

    >>> add_integer(-3.9, -3.1)
    -6

Floating and non-floating point values can be combined

:

    >>> add_integer(-3.9, -3)
    -6

That the second argument default works as intended (b=98)

:

    >>> add_integer(2)
    100

Non-Numbers

That a TypeError is raise if either argument is not of type int or float
:

    >>> add_integer("string", 5)
    Traceback (most recent call last):
    TypeError: a must be an integer

:

    >>> add_integer(5, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

:

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

:

    >>> add_integer(-3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

That the code breaks after an exception is raised

:

    >>> add_integer("string", "string")
    Traceback (most recent call last):
    TypeError: a must be an integer

Case infinity

:

    >>> add_integer(float('inf'), 100)
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

:

    >>> add_integer(5, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

:

    >>> add_integer(float('nan'), 100)
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

:

    >>> add_integer(5, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
